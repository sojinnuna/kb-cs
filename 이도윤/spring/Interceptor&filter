**13. Spring 에서 Interceptor와 Servlet Filter에 대해 설명해 주세요.**

- 설명만 들어보면 인터셉터만 쓰는게 나아보이는데, 아닌가요? 필터는 어떤 상황에 사용 해야 하나요?

**Spring**에서 **Interceptor**와 **Servlet Filter**는 둘 다 **HTTP 요청**이 컨트롤러나 서비스에 도달하기 전에 요청을 가로채거나 처리하는 역할을 합니다. 하지만 각각의 동작 방식, 적용 범위, 사용 목적이 조금씩 다릅니다. 그렇기에 두 가지 중 하나만 사용하는 것보다는, 상황에 따라 **필터와 인터셉터를 함께 사용**하는 것이 더 나을 수 있습니다. **필터**는 애플리케이션의 전역적인 처리에 적합하고, **인터셉터**는 Spring MVC와 더 밀접하게 작동하는 세밀한 요청 처리에 적합합니다.

### 1. **Interceptor(인터셉터)**

- **역할**: 인터셉터는 **Spring의 컨트롤러 레벨**에서 동작합니다. 즉, 요청이 컨트롤러에 도달하기 전에, 혹은 컨트롤러에서 응답을 보낸 후에 요청과 응답을 가로챕니다.
- **적용 범위**: 주로 특정 **URL 패턴**에 맞는 요청만 처리합니다. 인터셉터는 Spring MVC가 제공하는 기능이기 때문에, **DispatcherServlet** 이후에 동작합니다.
- **주요 메서드**:
    - `preHandle()`: 컨트롤러 메서드가 호출되기 전에 실행됩니다.
    - `postHandle()`: 컨트롤러 메서드가 호출된 후, 뷰가 렌더링되기 전에 실행됩니다.
    - `afterCompletion()`: 뷰가 완전히 렌더링된 후에 실행됩니다.
- **사용 목적**:
    - 컨트롤러에서 처리하는 로직에 앞서 **로그인 확인**, **권한 체크**, **로그 기록** 등과 같은 작업을 수행할 때 사용됩니다.

### 2. **Servlet Filter(서블릿 필터)**

- **역할**: **서블릿 레벨**에서 동작하는 필터는 요청이 **Spring의 DispatcherServlet**에 도달하기 전, 즉 **웹 애플리케이션 레벨**에서 요청을 가로채거나 변환합니다.
- **적용 범위**: 필터는 특정 서블릿에 국한되지 않고, 모든 요청에 대해 작동할 수 있습니다. 즉, Spring 이외의 서블릿이나 정적 자원에 대한 요청에도 적용됩니다.
- **주요 메서드**:
    - `doFilter()`: 요청과 응답을 가로채는 메서드로, 필요한 작업을 수행하고 체인의 다음 요소(필터나 서블릿)로 요청을 전달할지 결정합니다.
- **사용 목적**:
    - **애플리케이션 전체적인 작업**(예: **인코딩 설정**, **CORS 처리**, **보안 체크**, **전역 로깅** 등)을 처리할 때 유용합니다.
    - 특정 프레임워크에 종속되지 않고, Spring 외의 리소스에도 적용해야 하는 경우 사용됩니다.

### 

### **Interceptor와 Filter의 차이점**

|  | **Interceptor** | **Filter** |
| --- | --- | --- |
| **적용 범위** | Spring MVC 컨트롤러 | 서블릿 레벨, Spring 외의 리소스에도 적용 |
| **동작 시점** | DispatcherServlet 이후 | DispatcherServlet 이전 |
| **주요 사용 목적** | 컨트롤러 앞뒤로 요청을 가로채 특정 로직 처리 (로그인, 권한 체크) | 전역적 작업 처리 (인코딩, 보안, CORS) |
| **프레임워크 종속성** | Spring MVC 전용 | Java Servlet 스펙에 따름, 프레임워크에 종속적이지 않음 |

### **Interceptor만 사용하는 게 나아 보이는데, 왜 Filter를 사용할까요?**

- **필터는 더 낮은 레벨에서 동작**하기 때문에, Spring MVC 외의 요청 처리에도 적용됩니다. 예를 들어, **정적 자원**(CSS, JS 파일 등)에 대한 요청을 필터링하거나, 애플리케이션 전체에 대해 공통된 작업(CORS 설정 등)을 처리할 때 필터가 필요합니다. 반면, **인터셉터는 Spring MVC의 컨트롤러 레벨**에서만 동작하므로, 모든 요청에 대해 처리할 필요가 없다면 인터셉터가 더 적합할 수 있습니다. **컨트롤러에서 특정 로직을 적용할 때는 인터셉터**가 더 편리합니다.

### **어떤 상황에서 각각을 사용해야 하나요?**

- **필터 사용**:
    - 애플리케이션의 모든 요청(정적 리소스 포함)에 대해 **전역적인 작업**이 필요한 경우
    - Spring이 아닌 **서블릿 수준**에서 작동해야 한 경우
- **인터셉터 사용**:
    - 특정 **Spring 컨트롤러** 또는 **컨트롤러 메서드에 한정된 로직**이 필요할 때 (예: 로그인 체크, 권한 확인).
    - Spring MVC 요청과 관련된 **비즈니스 로직 전후의 작업**을 처리하고자 할 때.
