## 12. AOP에 대해 설명해 주세요.

AOP란 Aspect-Oriented Programming의 줄임말로, 관점 지향 프로그래밍을 의미합니다. 이는 소프트웨어 개발에서 횡단 관심사(Cross-Cutting Concerns)를 분리하여 코드의 모듈화를 개선하는 프로그래밍 패러다임입니다.

AOP의 가장 큰 특징이자 목표는 코드의 중복을 줄이고, 각 부분을 좀 더 **모듈화**하는 것을 목표로 합니다.

AOP는 주로 로깅, 트랜잭션 관리, 보안, 예외 처리와 같은 기능을 효과적으로 구현하는 데 사용됩니다. 이러한 기능은 여러 클래스나 모듈에서 공통적으로 필요하지만, 각각의 클래스에 직접 코드를 작성하면 코드 중복이 발생하고 유지보수가 어려워집니다.

여기서 **횡단 관심사**란 여러 모듈이나 기능에 걸쳐 공통적으로 필요한 기능이나 로직을 의미합니다. 일반적인 애플리케이션 개발에서는 핵심적인 비즈니스 로직 외에도 여러 기능들이 필요하며, 이 기능들은 특정 클래스나 메서드에 국한되지 않고 애플리케이션 전반에 걸쳐 발생합니다. 이러한 기능들이 바로 횡단 관심사입니다.

### AOP의 주요 개념

- **Aspect(관점)**: 공통 기능을 모듈화한 것 (예: 로그 처리, 보안 검사).
- **Join Point(조인 포인트)**: Aspect가 적용될 수 있는 지점. 메서드 호출이나 객체 생성 시점이 될 수 있음.
- **Advice(어드바이스)**: 실제로 실행되는 공통 기능 코드. 언제 실행될지에 따라 다양한 종류가 있음 (메서드 실행 전, 후 등).
    - **Before Advice**: 메서드 실행 전에 실행됩니다.
    - **After Advice**: 메서드 실행 후에 실행됩니다.
    - **Around Advice**: 메서드 실행 전후 또는 실행 자체를 제어합니다.
- **Pointcut(포인트컷)**: 공통 기능이 적용될 구체적인 위치를 결정하는 기준. "어떤 메서드에 적용할지"를 지정함.
- **Weaving(위빙)**: 실제로 Aspect가 적용되는 과정. 컴파일, 로드 타임, 런타임에 적용될 수 있음.

### AOP의 장점

- **코드 중복 감소**: 공통 기능을 하나의 Aspect로 분리하여 여러 클래스에서 동일한 코드를 반복 작성할 필요가 없습니다.
- **유지보수성 향상**: 핵심 로직과 부가적인 기능이 분리되므로 코드 가독성이 높아지고 유지보수가 용이해집니다.
- **유연한 확장성**: 새로운 횡단 관심사를 추가하거나 기존 것을 수정할 때도 코어 로직을 건드리지 않고 쉽게 변경할 수 있습니다.

### AOP의 활용 예시

스프링 프레임워크(Spring Framework)에서 AOP는 매우 자주 사용됩니다. 예를 들어, 특정 서비스 계층의 메서드에 트랜잭션을 적용하거나, 모든 메서드 호출 전에 로그를 기록하는 기능을 간단하게 구현할 수 있습니다.

### AOP 사용 사례

- **로깅**: 모든 메서드 호출 전후에 로그를 남기는 경우
- **트랜잭션 관리**: 데이터베이스 접근 시 트랜잭션을 자동으로 관리
- **보안**: 메서드 접근 권한을 체크하고 제한하는 경우

### @Aspect 는 어떻게 동작하나요?

Aspect 는 총 4단계로 동작됩니다.

**Aspect과 비즈니스 로직의 관계성**

비즈니스 로직은 소프트웨어 애플리케이션에서 **핵심 기능을 담당하는 코드**입니다. 즉, 사용자가 필요로 하는 **주요 작업을 처리하는 부분**을 의미합니다. 비즈니스 로직은 주로 회사나 애플리케이션의 목표에 맞는 **비즈니스 규칙**, **데이터 처리**, **업무 흐름**을 정의하고 실행합니다.

사실 Aspect은 이런 비즈니스 로직에 직접적인 영향을 주진 않습니다. 대신 **부가적인 기능**을 제공하는 방법입니다. 이를 통해 비즈니스 로직은 간결하게 유지할 수 있으며, 공통적인 기능은 쉽게 관리하고 확장할 수 있게 됩니다.

1. **Aspect 클래스 정의**: `@Aspect`는 공통 관심사를 포함하는 클래스를 정의하는 데 사용됩니다. `@Aspect` 주석을 사용하면 그 로직을 적용할 위치를 설정하는 데 활용됩니다. 이렇게 정의된 클래스는 하나 이상의 **Advice**를 포함할 수 있으며, Advice는 비즈니스 로직 앞뒤에서 실행될 수 있는 코드입니다.

    ```java
    @Aspect
    public class LoggingAspect {
        // Advice methods go here
    }
    ```

2. **Advice 정의**: **Advice**는 특정 시점에 실행되는 로직입니다. 예를 들어 메서드 실행 전이나 후, 혹은 예외 발생 시점에 실행될 수 있습니다. **Advice**는 `@Before`, `@After`, `@Around`와 같은 주석을 통해 정의됩니다.

    ```java
    @Before("execution(* com.example.service.*.*(..))")
    public void beforeAdvice(JoinPoint joinPoint) {
        System.out.println("Before method: " + joinPoint.getSignature());
    }
    ```

3. **Pointcut 정의**: **Pointcut**은 **Advice**가 적용될 구체적인 지점을 정의하는 데
